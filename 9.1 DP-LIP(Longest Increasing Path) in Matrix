Class 9 07/10/2019
Matrix problem
Description
Given n * n grid filled with positive integers, we want to find longest increasing path.

3 2 1
7 4 2
5 3 6
Solution 1
Explanation
f(i, j) = max path length to pos(i, j)
        = max(
            f(i-1, j) + 1 if A[i, j] > A[i-1, j], 
            f(i, j-1) + 1 if A[i, j] > A[i, j-1], 
            1
        )
Pseudocode
int longestIncPath(int[][] A) {
    int m = A.length;
    int n = A[0].length;
    int[][] dp = new int[m][n];
    for (int[] row: dp) Arrays.fill(row, 1);
    // fill the first row and col
    int res = 0;
    for (int i = 1; i < m; i++) {
        if (A[i][0] > A[i-1][0]) {
            dp[i][0] = dp[i-1][0] + 1;
            res = Math.max(res, dp[i][0]);
        } 
    }
    for (int i = 1; i < n; i++) {
        if (A[0][i] > A[0][i-1]) {
            dp[0][i] = dp[0][i-1] + 1;
            res = Math.max(res, dp[0][i]);
        }
    }
    for (int i = 1; i < m; i++) {
        for (int j = 1; j < n; j++) {
            if (A[i][j] > A[i-1][j]) dp[i][j] = Math.max(dp[i][j], dp[i-1][j] + 1);
            if (A[i][j] > A[i][j-1]) dp[i][j] = Math.max(dp[i][j], dp[i][j-1] + 1);
            res = Math.max(res, dp[i][j]);
        }
    }
    return res;
}
Solution 2
Explanation (Bottom up)
2 5 1
2 1 6
2 4 7

The intuition would be:
f(i, j) = max(  
        f(i-1, j) + 1 if A[i, j] > A[i-1, j], 
        f(i+1, j) + 1 if A[i, j] > A[i+1, j],
        f(i, j-1) + 1 if A[i, j] > A[i, j-1],
        f(i, j+1) + 1 if A[i, j] > A[i, j+1], 
        1
)

Sort the nums and its coordination.
1,1,2,2,3,4,5,6,7
(1,3), (2,2), (2,1)...

for dp matrix

_ _ 1
_ 1 _      1
_ _ _

_ _ 1
2 1 _      2
_ _ _

_ _ 1
2 1 _      2
1 _ _

3 _ 1
2 1 _      3
1 _ _

3 _ 1
2 1 _      4
1 4 _       

...

Time Complexity of bottom up approach is 
O(n^2logn + n^2) = O(n^2logn)
Pseudocode (Top down)
// Top down approach, O(n^2) time
int longestIncPath(int[][] A) {
    int m = A.length, n = A[0].length;
    int res = 0;
    int[][] dp = new int[m][n];
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            compute(A, dp, i, j);
            res = Math.max(res, dp[i][j]);
        }
    }
    return res;
}

void compute(int[][] A, int[][] dp, int i, int j) {
    int m = A.length, n = A[0].length;
    if (dp[i][j] != -1) return dp[i][[j]];
    dp[i][j] = 1;
    if (i >= 1 and A[i][j] > A[i-1][j]) {
        dp[i][j] = Math.max(dp[i][j], compute(A, dp, i-1, j));
    }
    if (i < m - 1 and A[i][j] > A[i+1][j]) {
        dp[i][j] = Math.max(dp[i][j], compute(A, dp, i+1, j));
    }    
    if (j >= 1 and A[i][j] > A[i][j-1]) {
        dp[i][j] = Math.max(dp[i][j], compute(A, dp, i, j-1));
    }    
    if (i < n-1 and A[i][j] > A[i][j+1]) {
        dp[i][j] = Math.max(dp[i][j], compute(A, dp, i, j+1));
    }    
    return dp[i][j];
}
Solution 3 (Graph follow up)
Explanation
1 -> 3 -> 2
|    |    |
7 <- 5 -> 8
|    |    |
2 <- 1 -> 4
Directed Graph
