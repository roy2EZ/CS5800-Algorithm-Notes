Dijkstraâ€™s algorithm
Description
Get the dist[], N is set of the vertices we vistited.
n is the total number of vertices.
while (|N| != n) {
    1. pick vertex u in V but not in N with the smallest dist[] value
    2. N.add(u)
    3. for all neighbors of u, relax them.
}
Example
Notes-2019-7-29-20-33-44.png
Notes-2019-7-29-20-33-44.png



S = 2
N = {}
dist = [inf, 0, inf, inf, inf]

1. u = 2, N = {2}, relax(2, 1), relax(2, 3), dist = [inf, 0, 4, 1, inf]
2. u = 4, N = {2, 4}, relax(4, 3), dist = [inf, 0, 3, 1, inf]
3. u = 3, N = {2, 4, 3}, relax(3, 1), dist = [5, 0, 3, 1, inf]
4. u = 1, N = {2, 4, 3, 1}, relax(1, 2), relax(1, 5), dist = [5, 0, 3, 1, 6]
4. u = 5, N = {2, 4, 3, 1, 5}, relax(5, 4), dist = [5, 0, 3, 1, 6]
Analysis
1. pick a smallest distance node, O(n)
2. Add the node to my set, set[node] = true, O(1)
3. relax u's neighbors, O(du), Dout < n.
4. Overall is n * n = n^2

Using min heap
1. pick u, O(1)
2. delete u, O(logn) and add to the set, O(1)
3. relax it's neieghbors, O(Du * logn).
## Here we just need to bubble up the changed node 
4. Overall is O(mlogn) = d1logn + d2logn + ... + dnlogn = mlogn
