Class 13 08/05/2019
Review
Shortest path on DAG, O(m+n)
Dijkstra’s Algorithm, O(mlogn) for pq, O(n^2) for matrix
Bellman Ford Algorithm, O(mn)

How do we track the shortest path? we need to modify the relax function.

relax(u, v) {
    if (dist[u] + cur < dist[v]) {
        dist[v] = u;
        parent[v] = u;
    }
}
All Pair Shortest Path
Description
Goal: Build dist[u, v] = shortest distance from u to v

negative weighted edges| DAG |not DAG |Time |
|:–:|:–:|:–:|:–:|
N | O(mn) = On^2 ~ On^3| Dijkstra’s algo| Onmlogn = O n2logn ~ n3logn or O n^3 |
Y | m = n(n-1) at most | Bellman Ford | O(mn^2) = On3 ~On4|

To improve the time complexity of Bellman Ford Algorithm interms of number of vertices, we can use Floyd-Warshall Algorithm.

Floyd - Warshall Algorithm
Description
We define f_k(u, v) = shortest distance from u to v with only vertices{1, 2, … k} on shortest path

Notes-2019-8-5-18-26-14.png
Notes-2019-8-5-18-26-14.png



Example:
f_1(u, v) = 20
f_2(u, v) = 7

f_k(u, v) = cur, if (u, v) in E
            inf, otherwise

base case:
f_0(u, v) = inf, if such edge doesn't exist
            weight(u, v), otherwise
f(u, u) = 0

Recurrence:
f_1(u, v) = min(f_0(u, v), f_0(u, 1) + f_0(1, v))
f_k+1(u, v) = min(f_k(u, v), f_k(u, k+1) + f_k(k+1, v))

f_n(u, v) = true shortest distance {1, 2, 3, ..., n}
PseudoCode
FW(G) {
    dist[,] = adj matrix
    for (k = 1, 2, ..., n) {
        for ( u = 1 ... n) {
            for (v = 1 ... n) {
                dist[u, v] = min(dist[u, v], dist[u, k] + dist[k, v]);
            }
        }
    }
}
Example
Notes-2019-8-5-18-45-38.png
Notes-2019-8-5-18-45-38.png



Adj matrix

0, 1, -2, inf
inf, 0, 3, inf
inf, inf, 0, -1
inf, 0, inf, 0

k = 1
dist[1, 1] = inf
dist[1, 2] = min(1, dist[1, 1] + dist[1, 2]) = 1
dist[1, 3] = min(-2, dist[1, 1] + dist[1, 3]) = -2
dist[1, 4] = min(inf, dist[1, 1] + dist[1, 4]) = inf

dist[2, 3] = min(dist[2, 3], dist[2, 1] + dist[1, 3]) = min(3, inf + (-2)) = 3

The first iteration basically doesn't change
k = 2
dist[1, 1] = min(inf, dist[1, 2] + dist[2, 1]) = inf
dist[1, 3] = min(-2, dist[1, 2] + dist[2, 3]) = min(1, 4) = 1

dist[4, 3] = min(inf, dist[4, 2] + dist[2, 3]) = 3


0, 1, -2, inf
inf, 0, 3, inf
inf, inf, 0, -1
inf, 0, 3, 0

k = 3
dist[1, 4] = min(inf, -2 + -1) = -3
dist[2, 1] = min(inf, 0 + inf) = inf
dist[2, 3] = min(3, 3 + 0) = 3
dist[2, 4] = min(inf, 3 + -1) = 2

...
Negative weighted cycle is not applicable!
